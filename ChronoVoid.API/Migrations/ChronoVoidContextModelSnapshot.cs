// <auto-generated />
using System;
using ChronoVoid.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChronoVoid.API.Migrations
{
    [DbContext(typeof(ChronoVoidContext))]
    partial class ChronoVoidContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChronoVoid.API.Models.AlienRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalTraits")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Disposition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("HumanAgreeability")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TechnologyLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("TranslatorCapable")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("AlienRaces");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Faction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WarMode")
                        .HasColumnType("text");

                    b.Property<int>("XP")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Factions");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.FactionMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FactionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("FactionId", "UserId")
                        .IsUnique();

                    b.ToTable("FactionMembers");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.HyperTunnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FromNodeId")
                        .HasColumnType("integer");

                    b.Property<int>("ToNodeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ToNodeId");

                    b.HasIndex("FromNodeId", "ToNodeId")
                        .IsUnique();

                    b.ToTable("HyperTunnels");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.NeuralNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoordinateX")
                        .HasColumnType("integer");

                    b.Property<int>("CoordinateY")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasQuantumStation")
                        .HasColumnType("boolean");

                    b.Property<int>("NodeNumber")
                        .HasColumnType("integer");

                    b.Property<int>("PlanetCount")
                        .HasColumnType("integer");

                    b.Property<int>("RealmId")
                        .HasColumnType("integer");

                    b.Property<string>("StarName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RealmId", "NodeNumber")
                        .IsUnique();

                    b.ToTable("NeuralNodes");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.NexusRealm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveAlienRaces")
                        .HasColumnType("integer");

                    b.Property<double>("ArtifactSystemChance")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("EnableArtifactSystems")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxAlienTechLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlanetsPerSystem")
                        .HasColumnType("integer");

                    b.Property<int?>("MinAlienTechLevel")
                        .HasColumnType("integer");

                    b.Property<int>("MinPlanetsPerSystem")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("NoDeadNodes")
                        .HasColumnType("boolean");

                    b.Property<int>("NodeCount")
                        .HasColumnType("integer");

                    b.Property<int>("PlanetDensity")
                        .HasColumnType("integer");

                    b.Property<int>("PlanetPurchaseContracts")
                        .HasColumnType("integer");

                    b.Property<int>("QuantumStationSeedRate")
                        .HasColumnType("integer");

                    b.Property<int>("ResourceDensity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("NexusRealms");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.OwnershipLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NewOwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlanetId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousOwnerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NewOwnerId");

                    b.HasIndex("PlanetId");

                    b.HasIndex("PreviousOwnerId");

                    b.ToTable("OwnershipLogs");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Planet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("NodeId")
                        .HasColumnType("integer");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlanetNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("NodeId", "PlanetNumber")
                        .IsUnique();

                    b.ToTable("Planets");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.PlanetContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int>("PlanetId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int?>("StarbaseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.HasIndex("StarbaseId");

                    b.ToTable("PlanetContracts");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.PlanetProduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseRate")
                        .HasColumnType("numeric");

                    b.Property<int>("CurrentStock")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlanetId")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlanetId");

                    b.ToTable("PlanetProductions");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Ship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CargoCapacity")
                        .HasColumnType("integer");

                    b.Property<int>("ComputerLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentNodeId")
                        .HasColumnType("integer");

                    b.Property<int>("LivesRemaining")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("ShieldLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<int>("WeaponLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurrentNodeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Ships");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.ShipCargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ShipId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShipId");

                    b.ToTable("ShipCargos");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Starbase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClaimedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DefenseLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastAttack")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NodeId")
                        .HasColumnType("integer");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NodeId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Starbases");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.TradeGood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("StarbaseId")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StarbaseId", "ResourceType")
                        .IsUnique();

                    b.ToTable("TradeGoods");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.TradeTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BuyerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SellerId")
                        .HasColumnType("integer");

                    b.Property<int>("StarbaseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StarbaseId");

                    b.ToTable("TradeTransactions");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Troop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<decimal>("DailyPay")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("DeployedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("PlanetId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlanetId");

                    b.ToTable("Troops");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CargoHolds")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentNodeId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RealmId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentNodeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RealmId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.FactionMember", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.Faction", "Faction")
                        .WithMany("Members")
                        .HasForeignKey("FactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronoVoid.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.HyperTunnel", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.NeuralNode", "FromNode")
                        .WithMany("OutgoingTunnels")
                        .HasForeignKey("FromNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChronoVoid.API.Models.NeuralNode", "ToNode")
                        .WithMany("IncomingTunnels")
                        .HasForeignKey("ToNodeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromNode");

                    b.Navigation("ToNode");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.NeuralNode", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.NexusRealm", "Realm")
                        .WithMany("Nodes")
                        .HasForeignKey("RealmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.OwnershipLog", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.User", "NewOwner")
                        .WithMany()
                        .HasForeignKey("NewOwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ChronoVoid.API.Models.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronoVoid.API.Models.User", "PreviousOwner")
                        .WithMany()
                        .HasForeignKey("PreviousOwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("NewOwner");

                    b.Navigation("Planet");

                    b.Navigation("PreviousOwner");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Planet", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.NeuralNode", "Node")
                        .WithMany("Planets")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronoVoid.API.Models.User", "Owner")
                        .WithMany("OwnedPlanets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Node");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.PlanetContract", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronoVoid.API.Models.Starbase", "Starbase")
                        .WithMany()
                        .HasForeignKey("StarbaseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Planet");

                    b.Navigation("Starbase");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.PlanetProduction", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Ship", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.NeuralNode", "CurrentNode")
                        .WithMany()
                        .HasForeignKey("CurrentNodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ChronoVoid.API.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentNode");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.ShipCargo", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.Ship", "Ship")
                        .WithMany("Cargo")
                        .HasForeignKey("ShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ship");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Starbase", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.NeuralNode", "Node")
                        .WithOne("Starbase")
                        .HasForeignKey("ChronoVoid.API.Models.Starbase", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronoVoid.API.Models.User", "Owner")
                        .WithMany("OwnedStarbases")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Node");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.TradeGood", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.Starbase", "Starbase")
                        .WithMany()
                        .HasForeignKey("StarbaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Starbase");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.TradeTransaction", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.User", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChronoVoid.API.Models.User", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ChronoVoid.API.Models.Starbase", "Starbase")
                        .WithMany()
                        .HasForeignKey("StarbaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Seller");

                    b.Navigation("Starbase");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Troop", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChronoVoid.API.Models.Planet", "Planet")
                        .WithMany()
                        .HasForeignKey("PlanetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Planet");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.User", b =>
                {
                    b.HasOne("ChronoVoid.API.Models.NeuralNode", "CurrentNode")
                        .WithMany("CurrentUsers")
                        .HasForeignKey("CurrentNodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ChronoVoid.API.Models.NexusRealm", "Realm")
                        .WithMany("Users")
                        .HasForeignKey("RealmId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentNode");

                    b.Navigation("Realm");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Faction", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.NeuralNode", b =>
                {
                    b.Navigation("CurrentUsers");

                    b.Navigation("IncomingTunnels");

                    b.Navigation("OutgoingTunnels");

                    b.Navigation("Planets");

                    b.Navigation("Starbase");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.NexusRealm", b =>
                {
                    b.Navigation("Nodes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.Ship", b =>
                {
                    b.Navigation("Cargo");
                });

            modelBuilder.Entity("ChronoVoid.API.Models.User", b =>
                {
                    b.Navigation("OwnedPlanets");

                    b.Navigation("OwnedStarbases");
                });
#pragma warning restore 612, 618
        }
    }
}
