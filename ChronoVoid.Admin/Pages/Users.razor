@page "/users"
@using ChronoVoid.API.Data
@using ChronoVoid.API.Models
@using Microsoft.EntityFrameworkCore
@inject ChronoVoidContext DbContext
@inject IJSRuntime JSRuntime

<PageTitle>Users - ChronoVoid 2500 Admin</PageTitle>

<div class="row">
    <div class="col-12">
        <h1 class="admin-title">ðŸ‘¥ User Management</h1>
    </div>
</div>

<div class="row mb-4">
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-people fs-1 text-success"></i>
                <h3 class="text-success">@totalUsers</h3>
                <p class="card-text">Total Users</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-person-check fs-1 text-info"></i>
                <h3 class="text-info">@activeUsers</h3>
                <p class="card-text">Active Users</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-globe fs-1 text-warning"></i>
                <h3 class="text-warning">@usersInRealms</h3>
                <p class="card-text">In Realms</p>
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="card">
            <div class="card-body text-center">
                <i class="bi bi-currency-dollar fs-1 text-primary"></i>
                <h3 class="text-primary">@totalCredits.ToString("N0")</h3>
                <p class="card-text">Total Credits</p>
            </div>
        </div>
    </div>
</div>

<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5><i class="bi bi-funnel"></i> Filters & Actions</h5>
                <div>
                    <button class="btn btn-outline-light btn-sm" @onclick="RefreshData">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button class="btn btn-outline-warning btn-sm" @onclick="ValidateAllUsers">
                        <i class="bi bi-shield-check"></i> Validate Users
                    </button>
                    <button class="btn btn-outline-danger btn-sm" @onclick="ClearAllUsers">
                        <i class="bi bi-trash"></i> Clear All
                    </button>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-3">
                        <label class="form-label">Search Username</label>
                        <input type="text" class="form-control" @bind="usernameFilter" @oninput="ApplyFilters" placeholder="Search usernames...">
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Search Email</label>
                        <input type="text" class="form-control" @bind="emailFilter" @oninput="ApplyFilters" placeholder="Search emails...">
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Realm</label>
                        <select class="form-select" @bind="realmFilter" @bind:after="ApplyFilters">
                            <option value="">All Realms</option>
                            <option value="none">No Realm</option>
                            @foreach (var realm in realms)
                            {
                                <option value="@realm.Id">@realm.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Activity</label>
                        <select class="form-select" @bind="activityFilter" @bind:after="ApplyFilters">
                            <option value="">All Users</option>
                            <option value="active">Active (7 days)</option>
                            <option value="inactive">Inactive</option>
                        </select>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="showInvalidUsers" @bind:after="ApplyFilters" id="invalidUsersCheck">
                            <label class="form-check-label" for="invalidUsersCheck">
                                Show Invalid Users Only
                            </label>
                        </div>
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5><i class="bi bi-table"></i> Users (@filteredUsers.Count)</h5>
            </div>
            <div class="card-body">
                @if (filteredUsers.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-dark table-striped table-hover">
                            <thead>
                                <tr>
                                    <th style="cursor: pointer;" @onclick="() => SortBy(nameof(User.Username))">
                                        Username
                                        @if (sortColumn == nameof(User.Username))
                                        {
                                            <i class="bi bi-arrow-@(sortAscending ? "up" : "down")"></i>
                                        }
                                    </th>
                                    <th>Email</th>
                                    <th>Realm</th>
                                    <th>Node</th>
                                    <th>Cargo</th>
                                    <th style="cursor: pointer;" @onclick="() => SortBy(nameof(User.LastLogin))">
                                        Last Login
                                        @if (sortColumn == nameof(User.LastLogin))
                                        {
                                            <i class="bi bi-arrow-@(sortAscending ? "up" : "down")"></i>
                                        }
                                    </th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in GetPagedUsers())
                                {
                                    <tr class="@(IsInvalidUser(user) ? "table-warning" : "")">
                                        <td>
                                            <strong>@user.Username</strong>
                                            @if (IsInvalidUser(user))
                                            {
                                                <span class="badge bg-danger ms-2">Invalid</span>
                                            }
                                        </td>
                                        <td>@user.Email</td>
                                        <td>
                                            @if (user.RealmId.HasValue)
                                            {
                                                var realm = realms.FirstOrDefault(r => r.Id == user.RealmId.Value);
                                                <span class="badge bg-info">@(realm?.Name ?? "Unknown")</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No Realm</span>
                                            }
                                        </td>
                                        <td>
                                            @if (user.CurrentNodeId.HasValue)
                                            {
                                                <span class="badge bg-success">Node @user.CurrentNodeId</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>@user.CargoHolds</td>
                                        <td>
                                            @{
                                                var timeSince = DateTime.UtcNow - user.LastLogin;
                                                if (timeSince.TotalMinutes < 60)
                                                {
                                                    <span class="badge bg-success">@((int)timeSince.TotalMinutes)m ago</span>
                                                }
                                                else if (timeSince.TotalHours < 24)
                                                {
                                                    <span class="badge bg-warning">@((int)timeSince.TotalHours)h ago</span>
                                                }
                                                else if (timeSince.TotalDays < 7)
                                                {
                                                    <span class="badge bg-secondary">@((int)timeSince.TotalDays)d ago</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">@user.LastLogin.ToString("MM/dd/yyyy")</span>
                                                }
                                            }
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-info" @onclick="() => ViewUserDetails(user)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => DeleteUser(user.Id)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination -->
                    <nav>
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                            </li>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                            </li>
                        </ul>
                    </nav>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-people fs-1 text-muted"></i>
                        <h4 class="text-muted mt-3">No users found</h4>
                        <p class="text-muted">No users match your current filters.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<User> allUsers = new();
    private List<User> filteredUsers = new();
    private List<NexusRealm> realms = new();
    
    private int totalUsers = 0;
    private int activeUsers = 0;
    private int usersInRealms = 0;
    private long totalCredits = 0;
    
    private string usernameFilter = "";
    private string emailFilter = "";
    private string realmFilter = "";
    private string activityFilter = "";
    private bool showInvalidUsers = false;
    
    private string sortColumn = nameof(User.Username);
    private bool sortAscending = true;
    
    private int currentPage = 1;
    private int pageSize = 15;
    private int totalPages => (int)Math.Ceiling((double)filteredUsers.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        allUsers = await DbContext.Users.ToListAsync();
        realms = await DbContext.NexusRealms.OrderBy(r => r.Name).ToListAsync();
        
        totalUsers = allUsers.Count;
        activeUsers = allUsers.Count(u => u.LastLogin > DateTime.UtcNow.AddDays(-7));
        usersInRealms = allUsers.Count(u => u.RealmId.HasValue);
        totalCredits = 0; // Credits not implemented in current model
        
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredUsers = allUsers.Where(u =>
            (string.IsNullOrEmpty(usernameFilter) || u.Username.Contains(usernameFilter, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(emailFilter) || u.Email.Contains(emailFilter, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(realmFilter) || 
                (realmFilter == "none" && !u.RealmId.HasValue) ||
                (int.TryParse(realmFilter, out var realmId) && u.RealmId == realmId)) &&
            (string.IsNullOrEmpty(activityFilter) ||
                (activityFilter == "active" && u.LastLogin > DateTime.UtcNow.AddDays(-7)) ||
                (activityFilter == "inactive" && u.LastLogin <= DateTime.UtcNow.AddDays(-7))) &&
            (!showInvalidUsers || IsInvalidUser(u))
        ).ToList();
        
        ApplySort();
        currentPage = 1;
        StateHasChanged();
    }

    private bool IsInvalidUser(User user)
    {
        return string.IsNullOrEmpty(user.Username) || user.Username.Length < 3;
    }

    private void ApplySort()
    {
        filteredUsers = sortColumn switch
        {
            nameof(User.Username) => sortAscending 
                ? filteredUsers.OrderBy(u => u.Username).ToList()
                : filteredUsers.OrderByDescending(u => u.Username).ToList(),
            nameof(User.LastLogin) => sortAscending 
                ? filteredUsers.OrderBy(u => u.LastLogin).ToList()
                : filteredUsers.OrderByDescending(u => u.LastLogin).ToList(),
            _ => filteredUsers
        };
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        ApplySort();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        usernameFilter = "";
        emailFilter = "";
        realmFilter = "";
        activityFilter = "";
        showInvalidUsers = false;
        ApplyFilters();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private List<User> GetPagedUsers()
    {
        return filteredUsers
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task ViewUserDetails(User user)
    {
        var details = $"User: {user.Username}\n" +
                     $"Email: {user.Email}\n" +
                     $"Cargo Holds: {user.CargoHolds}\n" +
                     $"Created: {user.CreatedAt:yyyy-MM-dd HH:mm}\n" +
                     $"Last Login: {user.LastLogin:yyyy-MM-dd HH:mm}";
        
        await JSRuntime.InvokeVoidAsync("alert", details);
    }

    private async Task DeleteUser(int userId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?"))
        {
            try
            {
                var user = await DbContext.Users.FindAsync(userId);
                if (user != null)
                {
                    DbContext.Users.Remove(user);
                    await DbContext.SaveChangesAsync();
                    await LoadData();
                    await JSRuntime.InvokeVoidAsync("alert", "User deleted successfully!");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {ex.Message}");
            }
        }
    }

    private async Task ValidateAllUsers()
    {
        var invalidUsers = allUsers.Where(IsInvalidUser).ToList();
        var validationMessage = $"Validation Results:\n" +
                               $"Total Users: {allUsers.Count}\n" +
                               $"Invalid Users: {invalidUsers.Count}\n" +
                               $"Valid Users: {allUsers.Count - invalidUsers.Count}\n\n" +
                               $"Invalid users have usernames that are:\n" +
                               $"- Empty or null\n" +
                               $"- Less than 3 characters\n\n" +
                               $"Use the 'Show Invalid Users Only' checkbox to filter and review them.";
        
        await JSRuntime.InvokeVoidAsync("alert", validationMessage);
        
        // Automatically show invalid users if any exist
        if (invalidUsers.Count > 0)
        {
            showInvalidUsers = true;
            ApplyFilters();
        }
    }

    private async Task ClearAllUsers()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete ALL users? This action cannot be undone!"))
        {
            try
            {
                await DbContext.Database.ExecuteSqlRawAsync("TRUNCATE TABLE \"Users\" RESTART IDENTITY CASCADE");
                await LoadData();
                await JSRuntime.InvokeVoidAsync("alert", "All users deleted successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting users: {ex.Message}");
            }
        }
    }
}